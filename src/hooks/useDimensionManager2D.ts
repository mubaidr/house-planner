/**
 * Hook for Dimension Manager System
 * 
 * Provides React integration for the dimension manager,
 * handling dimension creation, editing, and real-time updates.
 */

import { useState, useCallback, useMemo, useEffect } from 'react';
import { 
  DimensionManager2D, 
  Dimension2D, 
  DimensionChain2D,
  DimensionType,
  DimensionManagerConfig,
  // DimensionPoint2D - removed unused import
} from '@/utils/dimensionManager2D';
import { Point2D, Element2D } from '@/types/elements2D';
import { ViewType2D } from '@/types/views';

export interface UseDimensionManagerOptions {
  autoGenerate?: boolean;
  enabled?: boolean;
  config?: Partial<DimensionManagerConfig>;
  viewType?: ViewType2D;
  floorId?: string;
}

export interface UseDimensionManagerReturn {
  // Dimension management
  dimensions: Dimension2D[];
  chains: DimensionChain2D[];
  
  // Actions
  createDimension: (
    startPoint: Point2D,
    endPoint: Point2D,
    type?: DimensionType,
    options?: Partial<Dimension2D>
  ) => Dimension2D;
  updateDimension: (id: string, updates: Partial<Dimension2D>) => boolean;
  deleteDimension: (id: string) => boolean;
  createChain: (dimensionIds: string[], direction?: 'horizontal' | 'vertical' | 'angled') => DimensionChain2D;
  
  // Auto-generation
  autoGenerateDimensions: (elements: Element2D[]) => Dimension2D[];
  clearAutoDimensions: () => void;
  
  // Utilities
  formatValue: (dimension: Dimension2D) => string;
  getDimensionsForView: (viewType: ViewType2D, floorId?: string) => Dimension2D[];
  
  // Configuration
  config: DimensionManagerConfig;
  updateConfig: (updates: Partial<DimensionManagerConfig>) => void;
  
  // State
  isEnabled: boolean;
  setEnabled: (enabled: boolean) => void;
}

export function useDimensionManager2D(
  options: UseDimensionManagerOptions = {}
): UseDimensionManagerReturn {
  const {
    autoGenerate = true,
    enabled = true,
    config: initialConfig = {},
    viewType = 'plan',
    floorId = 'floor-1'
  } = options;

  // Initialize dimension manager
  const [manager] = useState(() => new DimensionManager2D(initialConfig));
  const [isEnabled, setIsEnabled] = useState(enabled);
  const [dimensions, setDimensions] = useState<Dimension2D[]>([]);
  const [chains, setChains] = useState<DimensionChain2D[]>([]);
  const [config, setConfig] = useState<DimensionManagerConfig>(manager.getConfig());

  // Update dimensions when manager changes
  const refreshDimensions = useCallback(() => {
    setDimensions(manager.getAllDimensions());
    setChains(manager.getDimensionChains());
  }, [manager]);

  // Create dimension
  const createDimension = useCallback((
    startPoint: Point2D,
    endPoint: Point2D,
    type: DimensionType = 'linear',
    options: Partial<Dimension2D> = {}
  ): Dimension2D => {
    if (!isEnabled) {
      throw new Error('Dimension manager is disabled');
    }

    const dimension = manager.createDimension(
      startPoint,
      endPoint,
      type,
      viewType,
      floorId,
      options
    );
    
    refreshDimensions();
    return dimension;
  }, [manager, isEnabled, viewType, floorId, refreshDimensions]);

  // Update dimension
  const updateDimension = useCallback((id: string, updates: Partial<Dimension2D>): boolean => {
    if (!isEnabled) return false;
    
    const success = manager.updateDimension(id, updates);
    if (success) {
      refreshDimensions();
    }
    return success;
  }, [manager, isEnabled, refreshDimensions]);

  // Delete dimension
  const deleteDimension = useCallback((id: string): boolean => {
    if (!isEnabled) return false;
    
    const success = manager.deleteDimension(id);
    if (success) {
      refreshDimensions();
    }
    return success;
  }, [manager, isEnabled, refreshDimensions]);

  // Create dimension chain
  const createChain = useCallback((
    dimensionIds: string[],
    direction: 'horizontal' | 'vertical' | 'angled' = 'horizontal'
  ): DimensionChain2D => {
    if (!isEnabled) {
      throw new Error('Dimension manager is disabled');
    }

    const chain = manager.createDimensionChain(dimensionIds, direction);
    refreshDimensions();
    return chain;
  }, [manager, isEnabled, refreshDimensions]);

  // Auto-generate dimensions
  const autoGenerateDimensions = useCallback((elements: Element2D[]): Dimension2D[] => {
    if (!isEnabled || !autoGenerate) return [];
    
    const generated = manager.autoGenerateDimensions(elements, viewType, floorId);
    refreshDimensions();
    return generated;
  }, [manager, isEnabled, autoGenerate, viewType, floorId, refreshDimensions]);

  // Clear auto-generated dimensions
  const clearAutoDimensions = useCallback(() => {
    const autoDimensions = dimensions.filter(dim => dim.isAutomatic);
    autoDimensions.forEach(dim => manager.deleteDimension(dim.id));
    refreshDimensions();
  }, [manager, dimensions, refreshDimensions]);

  // Format dimension value
  const formatValue = useCallback((dimension: Dimension2D): string => {
    return manager.formatDimensionValue(dimension);
  }, [manager]);

  // Get dimensions for specific view
  const getDimensionsForView = useCallback((
    targetViewType: ViewType2D,
    targetFloorId?: string
  ): Dimension2D[] => {
    return manager.getDimensionsForView(targetViewType, targetFloorId);
  }, [manager]);

  // Update configuration
  const updateConfig = useCallback((updates: Partial<DimensionManagerConfig>) => {
    manager.updateConfig(updates);
    setConfig(manager.getConfig());
  }, [manager]);

  // Initialize dimensions on mount
  useEffect(() => {
    refreshDimensions();
  }, [refreshDimensions]);

  // Memoized return object
  const returnValue = useMemo(() => ({
    // Data
    dimensions,
    chains,
    
    // Actions
    createDimension,
    updateDimension,
    deleteDimension,
    createChain,
    
    // Auto-generation
    autoGenerateDimensions,
    clearAutoDimensions,
    
    // Utilities
    formatValue,
    getDimensionsForView,
    
    // Configuration
    config,
    updateConfig,
    
    // State
    isEnabled,
    setEnabled: setIsEnabled
  }), [
    dimensions,
    chains,
    createDimension,
    updateDimension,
    deleteDimension,
    createChain,
    autoGenerateDimensions,
    clearAutoDimensions,
    formatValue,
    getDimensionsForView,
    config,
    updateConfig,
    isEnabled
  ]);

  return returnValue;
}

export default useDimensionManager2D;