/**
 * Enhanced Annotation Toolbar
 *
 * Provides comprehensive annotation tools including:
 * - Professional dimension tools
 * - Text annotation tools
 * - Area calculation tools
 * - Material callout tools
 * - Template-based export integration
 * - Style and formatting options
 */

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Separator } from '@/components/ui/separator';
import {
  Ruler,
  Type,
  Square,
  Tag,
  Settings,
  Eye,
  Download,
  Upload,
  Trash2,
  Palette,
  FileText,
  Calculator
} from 'lucide-react';
import { useUIStore } from '@/stores/uiStore';
import { useViewStore } from '@/stores/viewStore';
import { useFloorStore } from '@/stores/floorStore';
import { useDesignStore } from '@/stores/designStore';
import { convertElementsToElement2D } from '@/utils/elementTypeConverter';
import { useMaterialStore } from '@/stores/materialStore';
import { useEnhancedAnnotations } from '@/hooks/useEnhancedAnnotations';
import DimensionControls from '@/components/Annotations/DimensionControls';

interface EnhancedAnnotationToolbarProps {
  onExportTemplates?: () => void;
  onImportAnnotations?: () => void;
  onExportAnnotations?: () => void;
}

const EnhancedAnnotationToolbar: React.FC<EnhancedAnnotationToolbarProps> = ({
  onExportTemplates,
  onImportAnnotations,
  onExportAnnotations
}) => {
  const { activeTool, setActiveTool } = useUIStore();
  const { currentView } = useViewStore();
  const { currentFloorId } = useFloorStore();
  const { walls, doors, windows, stairs, roofs, rooms } = useDesignStore();
  const { materials } = useMaterialStore();

  // State for UI controls
  const [dimensionSettingsOpen, setDimensionSettingsOpen] = useState(false);
  const [textSettingsOpen, setTextSettingsOpen] = useState(false);
  const [areaSettingsOpen, setAreaSettingsOpen] = useState(false);
  const [materialSettingsOpen, setMaterialSettingsOpen] = useState(false);
  const [visibilityMenuOpen, setVisibilityMenuOpen] = useState(false);
  const [styleMenuOpen, setStyleMenuOpen] = useState(false);

  // Enhanced annotations hook
  const annotations = useEnhancedAnnotations({
    viewType: currentView,
    floorId: currentFloorId || 'floor-1',
    autoGenerate: true,
    dimensionOptions: {
      config: {
        autoGenerate: true,
        defaultStyle: 'architectural',
        defaultUnit: 'm',
        defaultOffset: 0.5,
        defaultTextSize: 12,
        defaultArrowSize: 0.1,
        defaultLineWeight: 1,
        defaultColor: '#000000',
        snapTolerance: 0.05,
        showTolerances: false,
        precision: 2
      }
    }
  });

  // Tool activation handlers
  const handleDimensionTool = () => {
    setActiveTool(activeTool === 'dimension' ? 'select' : 'dimension');
  };

  const handleTextTool = () => {
    setActiveTool(activeTool === 'text-annotation' ? 'select' : 'text-annotation');
  };

  const handleAreaTool = () => {
    setActiveTool(activeTool === 'area-annotation' ? 'select' : 'area-annotation');
  };

  const handleMaterialTool = () => {
    setActiveTool(activeTool === 'material-callout' ? 'select' : 'material-callout');
  };

  // Auto-generation handlers
  const handleAutoGenerateDimensions = () => {
    const elements2D = convertElementsToElement2D(walls, doors, windows, stairs, roofs, [], currentFloorId || '');
    annotations.autoGenerateDimensions(elements2D);
  };

  const handleAutoGenerateAreas = () => {
    const elements2D = convertElementsToElement2D([], [], [], [], [], rooms, currentFloorId || '');
    const rooms2D = elements2D.filter(el => el.type === 'room2d' || el.type === 'room');
    annotations.calculateRoomAreas(rooms2D as any[]); // Cast needed for Room2D compatibility
  };

  const handleAutoGenerateMaterials = () => {
    const elements2D = convertElementsToElement2D(walls, doors, windows, stairs, roofs, [], currentFloorId || '');
    annotations.autoGenerateMaterialCallouts(elements2D, materials);
  };  // Bulk operations
  const handleClearAll = () => {
    if (confirm('Are you sure you want to clear all annotations?')) {
      annotations.clearAllAnnotations();
    }
  };

  const handleExportAnnotations = () => {
    const data = annotations.exportAnnotations();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `annotations-${currentFloorId}-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);

    if (onExportAnnotations) {
      onExportAnnotations();
    }
  };

  const handleImportAnnotations = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          try {
            const data = JSON.parse(e.target?.result as string);
            annotations.importAnnotations(data);
          } catch (error) {
            console.error('Failed to import annotations:', error);
            alert('Failed to import annotations. Please check the file format.');
          }
        };
        reader.readAsText(file);
      }
    };
    input.click();

    if (onImportAnnotations) {
      onImportAnnotations();
    }
  };

  // Get active tool states
  const isDimensionActive = activeTool === 'dimension';
  const isTextActive = activeTool === 'text-annotation';
  const isAreaActive = activeTool === 'area-annotation';
  const isMaterialActive = activeTool === 'material-callout';

  return (
    <div className="flex items-center space-x-1 bg-white border border-gray-200 rounded-lg p-2 shadow-sm">
      {/* Dimension Tools */}
      <div className="flex items-center">
        <Button
          variant={isDimensionActive ? 'default' : 'outline'}
          size="sm"
          onClick={handleDimensionTool}
          className={`${isDimensionActive ? 'bg-blue-600 text-white' : ''}`}
          title="Dimension Tool (D)"
        >
          <Ruler className="w-4 h-4" />
        </Button>

        <Popover open={dimensionSettingsOpen} onOpenChange={setDimensionSettingsOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="px-2 ml-1"
              title="Dimension Settings"
            >
              <Settings className="w-3 h-3" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80" align="start">
            <div className="space-y-4">
              <h4 className="font-medium">Dimension Tools</h4>
              <DimensionControls
                config={annotations.dimensions.length > 0 ? annotations.dimensions[0] as any : {
                  snapToGrid: true,
                  autoSnap: true,
                  showUnits: true,
                  precision: 2
                }}
                isEnabled={true}
                onConfigUpdate={() => {}}
                onToggleEnabled={() => {}}
                onCreateDimension={handleDimensionTool}
                onAutoGenerate={handleAutoGenerateDimensions}
                onClearAuto={annotations.clearAutoDimensions}
              />
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Text Annotation Tools */}
      <div className="flex items-center">
        <Button
          variant={isTextActive ? 'default' : 'outline'}
          size="sm"
          onClick={handleTextTool}
          className={`${isTextActive ? 'bg-green-600 text-white' : ''}`}
          title="Text Annotation Tool (T)"
        >
          <Type className="w-4 h-4" />
        </Button>

        <Popover open={textSettingsOpen} onOpenChange={setTextSettingsOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="px-2 ml-1"
              title="Text Settings"
            >
              <Settings className="w-3 h-3" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80" align="start">
            <div className="space-y-4">
              <h4 className="font-medium">Text Annotations</h4>

              <div className="grid grid-cols-2 gap-2">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => {
                    // Create sample text annotation
                    annotations.createTextAnnotation(
                      { x: 0, y: 0 },
                      'Sample Note',
                      { category: 'note' }
                    );
                    setTextSettingsOpen(false);
                  }}
                >
                  Add Note
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => {
                    annotations.createTextAnnotation(
                      { x: 0, y: 0 },
                      'Specification',
                      { category: 'specification' }
                    );
                    setTextSettingsOpen(false);
                  }}
                >
                  Add Spec
                </Button>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Font Size</label>
                <select
                  className="w-full p-2 border rounded"
                  value={annotations.defaultTextStyle.fontSize}
                  onChange={(e) => annotations.updateDefaultStyles({
                    textStyle: { fontSize: parseInt(e.target.value) }
                  })}
                >
                  <option value={10}>10px</option>
                  <option value={12}>12px</option>
                  <option value={14}>14px</option>
                  <option value={16}>16px</option>
                  <option value={18}>18px</option>
                </select>
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Area Calculation Tools */}
      <div className="flex items-center">
        <Button
          variant={isAreaActive ? 'default' : 'outline'}
          size="sm"
          onClick={handleAreaTool}
          className={`${isAreaActive ? 'bg-purple-600 text-white' : ''}`}
          title="Area Calculation Tool (A)"
        >
          <Square className="w-4 h-4" />
        </Button>

        <Popover open={areaSettingsOpen} onOpenChange={setAreaSettingsOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="px-2 ml-1"
              title="Area Settings"
            >
              <Calculator className="w-3 h-3" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80" align="start">
            <div className="space-y-4">
              <h4 className="font-medium">Area Calculations</h4>

              <Button
                size="sm"
                variant="outline"
                onClick={handleAutoGenerateAreas}
                className="w-full"
              >
                Calculate Room Areas
              </Button>

              <div className="space-y-2">
                <label className="text-sm font-medium">Unit</label>
                <select className="w-full p-2 border rounded">
                  <option value="m">Meters (m²)</option>
                  <option value="ft">Feet (ft²)</option>
                  <option value="cm">Centimeters (cm²)</option>
                </select>
              </div>

              <div className="flex items-center space-x-2">
                <input type="checkbox" id="showCalculations" defaultChecked />
                <label htmlFor="showCalculations" className="text-sm">
                  Show calculations
                </label>
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Material Callout Tools */}
      <div className="flex items-center">
        <Button
          variant={isMaterialActive ? 'default' : 'outline'}
          size="sm"
          onClick={handleMaterialTool}
          className={`${isMaterialActive ? 'bg-orange-600 text-white' : ''}`}
          title="Material Callout Tool (M)"
        >
          <Tag className="w-4 h-4" />
        </Button>

        <Popover open={materialSettingsOpen} onOpenChange={setMaterialSettingsOpen}>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className="px-2 ml-1"
              title="Material Settings"
            >
              <Settings className="w-3 h-3" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80" align="start">
            <div className="space-y-4">
              <h4 className="font-medium">Material Callouts</h4>

              <Button
                size="sm"
                variant="outline"
                onClick={handleAutoGenerateMaterials}
                className="w-full"
              >
                Auto-Generate Callouts
              </Button>

              <div className="space-y-2">
                <label className="text-sm font-medium">Callout Style</label>
                <select className="w-full p-2 border rounded">
                  <option value="bubble">Bubble</option>
                  <option value="box">Box</option>
                  <option value="minimal">Minimal</option>
                </select>
              </div>

              <div className="flex items-center space-x-2">
                <input type="checkbox" id="showQuantities" defaultChecked />
                <label htmlFor="showQuantities" className="text-sm">
                  Show quantities
                </label>
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Visibility Controls */}
      <Popover open={visibilityMenuOpen} onOpenChange={setVisibilityMenuOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            title="Visibility Controls"
          >
            <Eye className="w-4 h-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-64" align="start">
          <div className="space-y-3">
            <h4 className="font-medium">Annotation Visibility</h4>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Dimensions</span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => annotations.toggleCategoryVisibility('dimension')}
                >
                  <Eye className="w-3 h-3" />
                </Button>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-sm">Text Notes</span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => annotations.toggleCategoryVisibility('note')}
                >
                  <Eye className="w-3 h-3" />
                </Button>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-sm">Area Calculations</span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => annotations.toggleCategoryVisibility('area')}
                >
                  <Eye className="w-3 h-3" />
                </Button>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-sm">Material Callouts</span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => annotations.toggleCategoryVisibility('material')}
                >
                  <Eye className="w-3 h-3" />
                </Button>
              </div>
            </div>
          </div>
        </PopoverContent>
      </Popover>

      {/* Style Controls */}
      <Popover open={styleMenuOpen} onOpenChange={setStyleMenuOpen}>
        <PopoverTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            title="Style Settings"
          >
            <Palette className="w-4 h-4" />
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-80" align="start">
          <div className="space-y-4">
            <h4 className="font-medium">Annotation Styles</h4>

            <div className="space-y-3">
              <div>
                <label className="text-sm font-medium">Dimension Style</label>
                <select className="w-full p-2 border rounded mt-1">
                  <option value="architectural">Architectural</option>
                  <option value="engineering">Engineering</option>
                  <option value="metric">Metric</option>
                  <option value="imperial">Imperial</option>
                </select>
              </div>

              <div>
                <label className="text-sm font-medium">Color Theme</label>
                <div className="grid grid-cols-4 gap-2 mt-1">
                  <div className="w-8 h-8 bg-blue-500 rounded cursor-pointer"></div>
                  <div className="w-8 h-8 bg-green-500 rounded cursor-pointer"></div>
                  <div className="w-8 h-8 bg-purple-500 rounded cursor-pointer"></div>
                  <div className="w-8 h-8 bg-orange-500 rounded cursor-pointer"></div>
                </div>
              </div>
            </div>
          </div>
        </PopoverContent>
      </Popover>

      <Separator orientation="vertical" className="h-6" />

      {/* Export/Import Controls */}
      <div className="flex items-center space-x-1">
        <Button
          variant="outline"
          size="sm"
          onClick={onExportTemplates}
          title="Export with Templates"
        >
          <FileText className="w-4 h-4" />
        </Button>

        <Button
          variant="outline"
          size="sm"
          onClick={handleExportAnnotations}
          title="Export Annotations"
        >
          <Download className="w-4 h-4" />
        </Button>

        <Button
          variant="outline"
          size="sm"
          onClick={handleImportAnnotations}
          title="Import Annotations"
        >
          <Upload className="w-4 h-4" />
        </Button>

        <Button
          variant="outline"
          size="sm"
          onClick={handleClearAll}
          title="Clear All Annotations"
          className="text-red-600 hover:text-red-700"
        >
          <Trash2 className="w-4 h-4" />
        </Button>
      </div>
    </div>
  );
};

export default EnhancedAnnotationToolbar;
