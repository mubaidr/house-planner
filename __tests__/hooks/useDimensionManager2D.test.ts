
import { renderHook, act } from '@testing-library/react';
import { useDimensionManager2D } from '@/hooks/useDimensionManager2D';
import { DimensionManager2D } from '@/utils/dimensionManager2D';

const mockDimensionManager = {
  createDimension: jest.fn(),
  updateDimension: jest.fn(),
  deleteDimension: jest.fn(),
  createDimensionChain: jest.fn(),
  autoGenerateDimensions: jest.fn(),
  getAllDimensions: jest.fn().mockReturnValue([]),
  getDimensionChains: jest.fn().mockReturnValue([]),
  formatDimensionValue: jest.fn(),
  getDimensionsForView: jest.fn(),
  getConfig: jest.fn().mockReturnValue({}),
  updateConfig: jest.fn(),
};

jest.mock('@/utils/dimensionManager2D', () => ({
  DimensionManager2D: jest.fn().mockImplementation(() => mockDimensionManager),
}));

describe('useDimensionManager2D', () => {
  beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
    (DimensionManager2D as jest.Mock).mockClear();
    // Reset mock implementations
    mockDimensionManager.getAllDimensions.mockReturnValue([]);
    mockDimensionManager.getDimensionChains.mockReturnValue([]);
    mockDimensionManager.getConfig.mockReturnValue({});
  });

  it('should be defined', () => {
    expect(useDimensionManager2D).toBeDefined();
  });

  it('should initialize with default options', () => {
    const { result } = renderHook(() => useDimensionManager2D());
    expect(result.current.isEnabled).toBe(true);
    expect(result.current.dimensions).toEqual([]);
    expect(result.current.chains).toEqual([]);
    expect(DimensionManager2D).toHaveBeenCalledWith({});
  });

  it('should create a dimension', () => {
    const { result } = renderHook(() => useDimensionManager2D());
    const startPoint = { x: 0, y: 0 };
    const endPoint = { x: 10, y: 0 };
    const newDimension = { id: 'dim1', startPoint, endPoint, value: 10 };

    mockDimensionManager.createDimension.mockReturnValue(newDimension);
    mockDimensionManager.getAllDimensions.mockReturnValue([newDimension]);

    act(() => {
      result.current.createDimension(startPoint, endPoint);
    });

    expect(mockDimensionManager.createDimension).toHaveBeenCalledWith(startPoint, endPoint, 'linear', 'plan', 'floor-1', {});
    expect(result.current.dimensions).toEqual([newDimension]);
  });
});
