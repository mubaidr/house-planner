
import { renderHook, act } from '@testing-library/react';
import { useEnhancedAnnotations } from '@/hooks/useEnhancedAnnotations';
import { useDimensionManager2D } from '@/hooks/useDimensionManager2D';

// Mock the useDimensionManager2D hook
jest.mock('@/hooks/useDimensionManager2D', () => ({
  useDimensionManager2D: jest.fn(() => ({
    dimensions: [],
    chains: [],
    createDimension: jest.fn(),
    updateDimension: jest.fn(),
    deleteDimension: jest.fn(),
    autoGenerateDimensions: jest.fn(),
    clearAutoDimensions: jest.fn(),
  })),
}));

describe('useEnhancedAnnotations', () => {
  const mockUseDimensionManager2D = useDimensionManager2D as jest.Mock;

  beforeEach(() => {
    jest.clearAllMocks();
    mockUseDimensionManager2D.mockImplementation(() => ({
      dimensions: [],
      chains: [],
      createDimension: jest.fn(),
      updateDimension: jest.fn(),
      deleteDimension: jest.fn(),
      autoGenerateDimensions: jest.fn(),
      clearAutoDimensions: jest.fn(),
    }));
  });

  it('should be defined', () => {
    expect(useEnhancedAnnotations).toBeDefined();
  });

  it('should initialize with default values and call useDimensionManager2D', () => {
    const { result } = renderHook(() => useEnhancedAnnotations({
      viewType: 'plan',
      floorId: 'floor1',
    }));

    expect(result.current.textAnnotations).toEqual([]);
    expect(result.current.areaAnnotations).toEqual([]);
    expect(result.current.materialCallouts).toEqual([]);
    expect(result.current.selectedAnnotationId).toBeNull();
    expect(result.current.selectedAnnotationType).toBeNull();
    expect(mockUseDimensionManager2D).toHaveBeenCalledWith({
      autoGenerate: true,
      enabled: true,
      viewType: 'plan',
      floorId: 'floor1',
    });
  });

  describe('text annotations', () => {
    it('should create a text annotation', () => {
      const { result } = renderHook(() => useEnhancedAnnotations({
        viewType: 'plan',
        floorId: 'floor1',
      }));

      act(() => {
        result.current.createTextAnnotation({ x: 10, y: 20 }, 'Test Text');
      });

      expect(result.current.textAnnotations).toHaveLength(1);
      expect(result.current.textAnnotations[0].text).toBe('Test Text');
    });

    it('should update a text annotation', () => {
      const { result } = renderHook(() => useEnhancedAnnotations({
        viewType: 'plan',
        floorId: 'floor1',
      }));

      let annotationId: string;
      act(() => {
        const annotation = result.current.createTextAnnotation({ x: 10, y: 20 }, 'Test Text');
        annotationId = annotation.id;
      });

      act(() => {
        result.current.updateTextAnnotation(annotationId, { text: 'Updated Text' });
      });

      expect(result.current.textAnnotations[0].text).toBe('Updated Text');
    });

    it('should delete a text annotation', () => {
      const { result } = renderHook(() => useEnhancedAnnotations({
        viewType: 'plan',
        floorId: 'floor1',
      }));

      let annotationId: string;
      act(() => {
        const annotation = result.current.createTextAnnotation({ x: 10, y: 20 }, 'Test Text');
        annotationId = annotation.id;
      });

      act(() => {
        result.current.deleteTextAnnotation(annotationId);
      });

      expect(result.current.textAnnotations).toHaveLength(0);
    });
  });
});
